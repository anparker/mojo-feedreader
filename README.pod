=encoding utf8

=head1 NAME

Mojo::FeedReader - minimalistic feed reader.

=head1 SYNOPSIS

  use Mojo::FeedReader;

  my $reader = Mojo::FeedReader->new('http://example.com/rss');

  $reader->on(
    fetch => sub {
      my ($reader, $entries, $feed) = @_;
      say $entries->map(sub { $_->{title} })->join("\n");
    }
  );

  $reader->on(
    error => sub {
      my ($reader, $msg) = @_;
      warn "Oops! $msg";
    }
  );

  $reader->wait();

=head1 DESCRIPTION

Very minimalistic RSS/ATOM feed and monitor based on L<Mojo::UserAgent> and
L<Mojo::DOM>.

=head1 EVENTS

L<Mojo::FeedReader> inherits all events from L<Mojo::EventEmitter> and can emit
the following new ones.

=head2 error

  $reader->on(error => sub {
    my ($reader, $msg) = @_;
    ...
  });

Emitted mostly on L<Mojo::UserAgent> errors.

=head2 fetch

  $reader->on(fetch => sub {
    my ($reader, $entries, $feed) = @_;
    ...
  });

Emitted when new entries are available. Receives L<Mojo::Collection> of hashrefs
with fetched entries and L<Mojo::DOM> object with parsed feed.

=head1 ATTRIBUTES

=head2 interval
  
  my $interval = $reader->interval;
  $reader      = $reader->interval(900);

Interval between recurring requests in seconds. Defaults to C<ttl> value from
feed or C<600>.

=head2 ioloop

  my $loop = $reader->ioloop;
  $reader  = $reader->ioloop(Mojo::IOLoop->new);
 
Event loop object to control, defaults to the global L<Mojo::IOLoop> singleton.

=head2 info

  my $info = $reader->info;
  $reader  = $reader->info({title => 'Test feed'});

Hashref with feed metadata. Holds various info fetched from feed.

=head2 ua

  my $ua  = $reader->ua;
  $reader = $reader->ua(Mojo::UserAgent->new());

User agent object to use for requests. Defaults to a L<Mojo::UserAgent> with
max_connections set to C<0>.

=head2 url

  my $url = $reader->url;
  $reader = $reader->url('http://another.example.com/rss');

URL of a feed to fetch. Required. Object will die on first request unless
specified.

=head1 METHODS

=head2 stop

  # remove timer and stop receiving feed updates.
  $reader->stop();

  # remove timer and stop event loop
  $reader->stop(1);

Stop receiving updates and remove recurring timer without removing an object
instance itself.  It will be impossible to start again.

Will stop L</ioloop> if called with an argument.

=head2 wait

  my $reader = Mojo::FeedReader->new('http://rss.me/')
    ->on(fetch => sub { ... });
  $reader->wait();

Start L</ioloop> unless it's already running.

=head1 AUTHOR

Andre Parker <andreparker@gmail.com>

=head1 LICENSE

This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.

=cut
